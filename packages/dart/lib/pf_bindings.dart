import 'dart:typed_data';

// This will be generated by Flutter Rust Bridge
part 'ffi_generated_code.dart';

/// Exception thrown when Probably Fair operations fail
class PfBindingsException implements Exception {
  final String message;
  
  PfBindingsException(this.message);
  
  @override
  String toString() => 'PfBindingsException: $message';
}

/// Dart bindings for Probably Fair operations
class PfBindings {
  /// Verifies a bet receipt against its transcript
  /// 
  /// [receiptJson] The bet receipt as a JSON string
  /// [transcriptJson] The transcript as a JSON string
  /// 
  /// Throws [PfBindingsException] if verification fails
  static Future<void> verifyBet({
    required String receiptJson,
    required String transcriptJson,
  }) async {
    try {
      await verifyBet(
        receiptJson: receipt_json,
        transcriptJson: transcript_json,
      );
    } catch (e) {
      throw PfBindingsException('Verification failed: $e');
    }
  }
  
  /// Registers a GDP package for use in betting operations
  /// 
  /// [bytes] The GDP package binary data
  /// 
  /// Throws [PfBindingsException] if registration fails
  static Future<void> registerGdpPackage(Uint8List bytes) async {
    try {
      await registerGdpPackage(bytes: bytes.toList());
    } catch (e) {
      throw PfBindingsException('Registration failed: $e');
    }
  }
  
  /// Registers a GDP package from a hex string
  /// 
  /// [hexString] The package data as a hex string
  /// 
  /// Throws [PfBindingsException] if registration fails
  static Future<void> registerGdpPackageFromHex(String hexString) async {
    try {
      final bytes = _hexToBytes(hexString);
      await registerGdpPackage(bytes);
    } catch (e) {
      throw PfBindingsException('Registration failed: $e');
    }
  }
  
  /// Converts a hex string to bytes
  static Uint8List _hexToBytes(String hex) {
    final result = <int>[];
    for (int i = 0; i < hex.length; i += 2) {
      if (i + 1 < hex.length) {
        final byte = int.parse(hex.substring(i, i + 2), radix: 16);
        result.add(byte);
      }
    }
    return Uint8List.fromList(result);
  }
}
